#!/bin/bash

set -e
echo
echo "---> Build started at $(date)"
echo
START=$SECONDS

# Unconditionally print elapsed build time at exit
function finish {
  echo "===> Elapsed time: $(($SECONDS - $START)) seconds"
}
trap finish EXIT

echo "PWD is ${PWD}"

# By default the s2i build places the application source in /tmp/src directory. 
# This directory is where the source and other assets will be placed for the build process. 
# You can modify this location by setting the io.openshift.s2i.destination label or passing --destination flag, 
# in which case the sources will be placed in the src subdirectory of the directory you specified. 
# The destination in the above command (./) is using WORKDIR (usually set in the FROM docker image), 
# which we specified in our Dockerfile, and which is set to be /opt/app-root/src.
echo "---> Preparing source..."
cp -Rf /tmp/src/. ./
cd ./

# echo "---> Creating local package dependencies..."
# TODO: figure out if we need to init any local Swift packages/module.maps bundled with this source
# git init, moving stuff around, etc

echo "---> Compiling and installing application source..."
# TODO: if exists Package.json
echo "   ... building as a Swift package based on Package.swift (DEBUG MODE)"
swift build -v -c debug
#echo "   ... building as a Swift package based on Package.swift (RELEASE MODE)"
#swift build -v -c release

# TODO: else just use swiftc and output an app
#echo "   ... building as flat swift files and outputting as an executable named app"
# swiftc *.swift $EXTRA_COMPILE_OPTIONS -v -o ../app

find ./.build/debug -maxdepth 1 -type f -executable | while read line; do
	echo "copying EXEC to run dir: ${line}"
	cp ${line} ../
done
echo "---> Build completed at $(date)"

# TODO: Fix source directory permissions?
# TODO: support for release mode
